WORK CYCLE
==========
mkdir <WORKING TREE>
cd <WORKING TREE>
git init		(makes .git in directory)
edit <files> 		(change WORKING TREE)
git diff HEAD		(diff WORKING TREE and HEAD)
git diff 		(diff WORKING TREE and INDEX)
git status		(show what has been modified)
git add <files> 	(stage <files> in WORKING TREE to the INDEX staging area)
git diff --cached	(diff INDEX and HEAD)
git commit 		(permanentize -- copy INDEX to HEAD)

BRANCHING
=========
git branch		(show working branch)
git branch brnch	(create brnch)
git checkout <branch>	(WORKING TREE now matches <branch>)
git checkout master	(get on master branch)
git merge brnch		(merge branch back in to master)
git add <files>
git commit 
or git commit -a

HANDY COMMANDS
==============
git diff HEAD^..HEAD	(see last changes)
git shortlog		(show the comments to the various commits)

git log --pretty=oneline      (show commit IDs of recent commits)
git diff ax34..xio3	(show diff between commit IDs)
gitk	 		(show cool graphics screen)

git log --stat --summary      (see changes -- most recent at top)


===== older cheat sheet attempt ===========
# man gittutorial  -- more stuff

# go to directory and start new project
git init

# add some files and not others, and you can do this again later when creating new file
git add <file-selection>

# what is about to be committed
git diff --cached

# commit poi-manently
git commit

# make changes to a bunch of files and just commit those
git commit -a

# see change history
git log -p | grep -A 2 ^@

# make branch
git branch experimental

# see all branches
git branch
 
# switch to experimental branch
git checkout experimental

# double check
git branch  # asterisk will mark the branch you are on

# make changes on branch and stage
git add <changed file[s]>

# commit changes
git commit -a

